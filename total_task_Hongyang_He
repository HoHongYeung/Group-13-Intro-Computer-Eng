clear;
disp('Press a -- Perform FIR filtering');
disp('Press b -- Extraction of signal segments');
disp('Press c -- Calculate the average energy for specified frequency regions');
disp('Press d -- Modelling of the energy values using Gaussian PDF');
disp('Press e -- Exit the program');
strResponse = input('Please make your choice: ', 's');
while (strcmp(strResponse,'e')~=1)
    switch (strResponse)
        case 'a'
          clear;
      fid=fopen('listData.txt','rt');
      index1=0;
      textline=fscanf(fid,'%s',1);
      while(strcmp(textline,'.')~=1)
        index1=index1+1;
        structData{index1}=textline;
        textline=fscanf(fid,'%s',1); %use a loop to operate and then store data
      end
      fclose(fid);
      index2=1;
      while index2<(51)      
        m=structData(:,index2);
        wavname=['wavOrig/',m,'.wav']; %use every line as the route of wavfile
        name=strcat(wavname(1),wavname(2),wavname(3));
        c=cell2mat(name);
        [inpsigwav,Fs]=audioread(c);
        nSamples=length(inpsigwav);
        firCoef=[-0.7,-0.9,-0.9,0.7,0.5,0.3,0.3];
        nCoef=length(firCoef);
        inpsigwav=[zeros(nCoef,1);inpsigwav;zeros(nCoef,1)];
        nSamplesNew=length(inpsigwav);
        outSigWav=zeros(nSamplesNew,1);
        for d=1+nCoef:nSamples+nCoef
            outSigWav(d)=firCoef(1)*inpsigwav(d)+firCoef(2)*inpsigwav(d-1)+firCoef(3)*inpsigwav(d-2)+firCoef(4)*inpsigwav(d-3)+firCoef(5)*inpsigwav(d-4)+firCoef(6)*inpsigwav(d-5)+firCoef(7)*inpsigwav(d-6);
        end
        filtName=['wavFilt/',m,'.wav'];
        e=strcat(filtName(1),filtName(2),filtName(3));
        filenameout=cell2mat(e);     %define the files that we want to put sampled wavfiles
        audiowrite(filenameout,outSigWav,Fs);
        index2=index2+1;
      end
      datacontents=[firCoef,zeros(1,249)];  
      magFreqChar=abs(fft(datacontents));
      magFreqChar_dB=20*log10(magFreqChar);  %convert to dB
      figure;
      plot([0:127]*Fs/256,magFreqChar_dB(1:128));
      grid;
      xlabel('Frequency(Hz)');ylabel('Amplitude(dB)')
case 'b'
clear all;
clc;

h=0;j=0;%%h是aa的个数 j是s的个数
fid = fopen('listData.txt', 'rt');
textline = fscanf(fid, '%s', 1);
index1 = 0;

while (strcmp(textline,'.') ~= 1)
    index1= index1+1;
    storeDataStruct{index1} = textline;   
    textline = fscanf(fid, '%s', 1);   
end
fclose(fid);

s=length(storeDataStruct);
index2 = 1;

while index2 <= s
    a = storeDataStruct(:, index2); %%取tet
    wavename = ['labels/', a, '.lab'];   %将wavOrig的每一行都用作waveFilt的路径 
    wavename2= ['wavOrig/',a, '.wav'];
    name = strcat(wavename(1), wavename(2), wavename(3));
    name2= strcat(wavename2(1), wavename2(2), wavename2(3));
    c = cell2mat(name);   %将名字转换为基础数组
    c2=cell2mat(name2);
    fid=fopen(c);
    lines=0;%%数行数
       while ~feof(fid)
           fgetl(fid);
         lines = lines +1;
       end
    fclose(fid);
    fid=fopen(c); %%必加 防止乱码
    data(lines)=struct('start',[],'over',[],'phoneme',[]); %%第一行起始时间 第二行结束 第三行音符
       for i=1:lines %%提取lab信息
         data(i).start=fscanf(fid,'%f',1);
         data(i).over=fscanf(fid,'%f',1);
         data(i).phoneme=fscanf(fid,'%s\n',1); %% /n转行提取
        end
     fclose(fid);
    for n=1:lines %%时间转换
      st(n)=data(n).start/10000; 
      ov(n)=data(n).over/10000; 
      segst(n)=round(((st(n)+ov(n))/2-12.5)*8); %%round to an integer
    end
        [x,fs] = audioread(c2); %%读数据片段
        h2=0;
        j2=0;
    for n=1:lines %%扫描文件
       if data(n).phoneme == "aa"
         h=h+1;%%数整体符合aa的有几个片段
         h2=h2 +1;%%数n里面有几个片段
         y(h,1)=n;%%提取numsegOrig 
         phoneme_aa= x(( segst(n) + 1) : (segst(n)+200), 1);%%提取aa片段
         for k=1:length(phoneme_aa) 
            segOrig_phAA(h,k)=phoneme_aa(k);
          end
       elseif data(n).phoneme == "s"
         j=j+1;
         j2=j2+1;
         u(j,1)=n;
        phoneme_s= x(( segst(n) + 1) :  (segst(n)+200), 1);
         for k=1:length(phoneme_s)
            segOrig_phS(j,k)=phoneme_s(k);
          end
       end
    end
    if index2 == 1  

    figure; %%optionB要求画图
   subplot(2,1,1);plot(phoneme_aa);title('the first phoneme aa');
   subplot(2,1,2);plot(phoneme_s);title('the first phoneme s');
    end
    numsegOrig_phAA(index2,1)=string(a);
    numsegOrig_phAA(index2,2)=h2;
    numsegOrig_phS(index2,1)=string(a);
    numsegOrig_phS(index2,2)=j2;

index2=index2+1;
end
save('segAllData.mat','segOrig_phAA','segOrig_phS','numsegOrig_phAA','numsegOrig_phS');

case 'c'
    clear;
load segAllData.mat  

         DFTOrig_phS=fft(segOrig_phS.');
         DFTOrig_phAA=fft(segOrig_phAA.');
         RegionA_ind1=400*size(segOrig_phS,2)/8000; 
         RegionA_ind2=1600*size(segOrig_phS,2)/8000;
         RegionB_ind1=2400*size(segOrig_phAA,2)/8000;
         RegionB_ind2=4000*size(segOrig_phAA,2)/8000;
         coefficient1=1/(RegionA_ind2-RegionA_ind1+1);
         coefficient2=1/(RegionB_ind2-RegionB_ind1+1);
         enRegAB_orig_phAA=[];
         enRegAB_orig_phS=[];
         for n=1:size(segOrig_phS,1)      
           enRegAB_orig_phS(n,1)=10*log10(coefficient1*(sum(abs(DFTOrig_phS(RegionA_ind1+1:RegionA_ind2,n)).^2)));
           enRegAB_orig_phS(n,2)=10*log10(coefficient2*(sum(abs(DFTOrig_phS(RegionB_ind1+1:RegionB_ind2,n)).^2)));
         end
         for n=1:size(segOrig_phAA,1)
           enRegAB_orig_phAA(n,1)=10*log10(coefficient1*(sum(abs(DFTOrig_phAA(RegionA_ind1+1:RegionA_ind2,n)).^2)));
           enRegAB_orig_phAA(n,2)=10*log10(coefficient2*(sum(abs(DFTOrig_phAA(RegionB_ind1+1:RegionB_ind2,n)).^2)));
         end
         
          figure;
            enOrigRegA_phS=histogram(enRegAB_orig_phS(:,1));
            legend('the average energy values for the frequency region A for the phoneme ‘s’');
            figure;
            enOrigRegB_phS=histogram(enRegAB_orig_phS(1:end,2));
            legend('the average energy values for the frequency region B for the phoneme ‘s’');
            figure;
            enOrigRegA_phAA=histogram(enRegAB_orig_phAA(:,1));
            legend('the average energy values for the frequency region A for the phoneme ‘aa’');
            figure;
            enOrigRegB_phAA=histogram(enRegAB_orig_phAA(1:end,2));
            legend('the average energy values for the frequency region B for the phoneme ‘aa’');
case 'd'
    clear all
    load segAllData.mat
    clear;
            fid = fopen('listData.txt','rt');
            textLine = fscanf(fid,'%s',1);
            ind_s = 0;
            ind_aa = 0;
            num_s=0;
            num_aa=0;
            Orig_s=[];
            Orig_aa=[];%Store full audio
            
            while (strcmp(textLine,'.')~=1)
                filename=strcat('labels\',textLine,'.lab');
                file=fopen(filename,'rt');
                textCol = textscan(file,'%f %f %s');%Scan the 3 columns
                audioname=strcat('wavOrig\',textLine,'.wav');
                [inpSigWav,Fs] = audioread(audioname);                
                
                % Store the data into a cell/standard array
                for i=1:size(textCol{1},1)
                    if strcmp(textCol{3}(i),'s')==1
                        ind_s=ind_s+1;
                        num_s=num_s+1;
                        timePhStart_s(ind_s) = textCol{1}(i);
                        timePhEnd_s(ind_s) = textCol{2}(i);
                        Orig_s{num_s}=inpSigWav;
                    end
                    
                    if strcmp(textCol{3}(i),'aa')==1
                        ind_aa=ind_aa+1;
                        num_aa=num_aa+1;
                        timePhStart_aa(ind_aa) = textCol{1}(i);
                        timePhEnd_aa(ind_aa) = textCol{2}(i);
                        Orig_aa{num_aa}=inpSigWav;
                    end
                end
                
                fclose(file);
                textLine = fscanf(fid,'%s',1);
            end
            
            timeSegStart_ms_s = timePhStart_s*10^(-4) + (timePhEnd_s*10^(-4) - timePhStart_s*10^(-4))/2 - 12.5;
            timeSegEnd_ms_s = timeSegStart_ms_s + 25;
            indexSegStart_s = round(timeSegStart_ms_s*Fs/1000,0);
            indexSegEnd_s = round(timeSegEnd_ms_s*Fs/1000,0);
            
            timeSegStart_ms_aa = timePhStart_aa*10^(-4) + (timePhEnd_aa*10^(-4) - timePhStart_aa*10^(-4))/2 - 12.5;
            timeSegEnd_ms_aa = timeSegStart_ms_aa + 25;
            indexSegStart_aa = round(timeSegStart_ms_aa*Fs/1000,0);
            indexSegEnd_aa = round(timeSegEnd_ms_aa*Fs/1000,0);
            
            ind1_A=ceil(201*400/Fs);
            ind2_A=ceil(201*1600/Fs);
            ind1_B=ceil(201*2400/Fs);
            ind2_B=ceil(201*4000/Fs);            
            
            for j=1:ind_s
                value1(j,1)=0;
                value1(j,2)=0;%for frequency region B
                %intercept the Orig_s according to the time index, and store
                %the result in segOrig_phS
                segOrig_phS(j,1:201)=(Orig_s{j}(indexSegStart_s(j):indexSegEnd_s(j),1))';
                segOrig_phS_ft(j,1:201)=abs(fft(segOrig_phS(j,1:201)));
                %the |X(k)|^2 of the number of columns 11 to 41 of
                %each row is added and stored into the first column of value1
                for m=ind1_A:ind2_A
                    value1(j,1)=abs(segOrig_phS_ft(j,m))^2+value1(j,1);
                end
                aveEn_dB_A_s(j,1)=10*log10(value1(j,1)/(ind2_A-ind1_A+1));
                enOrigRegAB_phS(j,1)=aveEn_dB_A_s(j,1);
                for n=ind1_B:ind2_B
                    value1(j,2)=abs(segOrig_phS_ft(j,n))^2+value1(j,2);
                end
                aveEn_dB_B_s(j,1)=10*log10(value1(j,2)/(ind2_B-ind1_B+1));
                enOrigRegAB_phS(j,2)=aveEn_dB_B_s(j,1);
            end
            
            for k=1:ind_aa
                value2(k,1)=0;
                value2(k,2)=0;
                segOrig_phAA(k,1:201)=(Orig_aa{k}(indexSegStart_aa(k):indexSegEnd_aa(k),1))';
                segOrig_phAA(k,1:201)=(Orig_aa{k}(indexSegStart_aa(k):indexSegEnd_aa(k),1))';
                segOrig_phAA_ft(k,1:201)=abs(fft(segOrig_phAA(k,1:201)));
                for o=ind1_A:ind2_A
                    value2(k,1)=abs(segOrig_phAA_ft(k,o))^2+value2(k,1);
                end
                aveEn_dB_A_aa(k,1)=10*log10(value2(k,1)/(ind2_A-ind1_A+1));
                enOrigRegAB_phAA(k,1)=aveEn_dB_A_aa(k,1);
                for p=ind1_B:ind2_B
                    value2(k,2)=abs(segOrig_phAA_ft(k,p))^2+value2(k,2);
                end
                aveEn_dB_B_aa(k,1)=10*log10(value2(k,2)/(ind2_B-ind1_B+1));
                enOrigRegAB_phAA(k,2)=aveEn_dB_B_aa(k,1);
            end
            
            fclose(fid);
            
            sum_element_A_s=0;
            diff_element_A_s=0;
            for q=1:80
                sum_element_A_s=aveEn_dB_A_s(q)+sum_element_A_s;
                m_A_s=sum_element_A_s/80;
            end
            for q=1:80
                diff_element_A_s=(aveEn_dB_A_s(q)-m_A_s)^2+diff_element_A_s;
                v_A_s=diff_element_A_s/80;
                sv_A_s=v_A_s^(0.5);
            end
            
            for q=1:80
                gPDF_A_s(q)=(1/sqrt(2*pi*v_A_s))*exp(-(aveEn_dB_A_s(q)-m_A_s)^2/2/v_A_s);
            end
            
            sum_element_B_s=0;
            diff_element_B_s=0;
            for q=1:80
                sum_element_B_s=aveEn_dB_B_s(q)+sum_element_B_s;
                m_B_s=sum_element_B_s/80;
            end
            for q=1:80
                diff_element_B_s=(aveEn_dB_B_s(q)-m_B_s)^2+diff_element_B_s;
                v_B_s=diff_element_B_s/80;
                sv_B_s=v_B_s^(0.5);
            end
            
            for q=1:80
                gPDF_B_s(q)=(1/sqrt(2*pi*v_B_s))*exp(-(aveEn_dB_B_s(q)-m_B_s)^2/2/v_B_s);
            end
            
            sum_element_A_aa=0;
            diff_element_A_aa=0;
            for r=1:64
                sum_element_A_aa=aveEn_dB_A_aa(r)+sum_element_A_aa;
                m_A_aa=sum_element_A_aa/64;
            end
            for r=1:64
                diff_element_A_aa=(aveEn_dB_A_aa(r)-m_A_aa)^2+diff_element_A_aa;
                v_A_aa=diff_element_A_aa/64;
                sv_A_aa=v_A_aa^(0.5);
            end
            
            for r=1:64
                gPDF_A_aa(r)=(1/sqrt(2*pi*v_A_aa))*exp(-(aveEn_dB_A_aa(r)-m_A_aa)^2/2/v_A_aa);
            end
            
            sum_element_B_aa=0;
            diff_element_B_aa=0;
            for r=1:64
                sum_element_B_aa=aveEn_dB_B_aa(r)+sum_element_B_aa;
                m_B_aa=sum_element_B_aa/64;
            end
            for r=1:64
                diff_element_B_aa=(aveEn_dB_B_aa(r)-m_B_aa)^2+diff_element_B_aa;
                v_B_aa=diff_element_B_aa/64;
                sv_B_aa=v_B_aa^(0.5);
            end
            
            for r=1:64
                gPDF_B_aa(r)=(1/sqrt(2*pi*v_B_aa))*exp(-(aveEn_dB_B_aa(r)-m_B_aa)^2/2/v_B_aa);
            end
            
            gPDF_s(:,1)=(gPDF_A_s(1:80))';
            gPDF_s(:,2)=(gPDF_B_s(1:80))';
            gPDF_aa(:,1)=(gPDF_A_aa(1:64))';
            gPDF_aa(:,2)=(gPDF_B_aa(1:64))';
            
            item={'Region A of aa';'Region B of aa';'Region A of s';'Region B of s'};
            mean={m_A_aa;m_B_aa;m_A_s;m_B_s};
            variance={v_A_aa;v_B_aa;v_A_s;v_B_s};
            table_para=table(item,mean,variance);
            
            save('table with modelling of the energy values.mat','gPDF_aa','gPDF_s');
            load ('table with modelling of the energy values.mat');
            

    
        otherwise
            disp('incorrect choice - please enter again');
    end
    strResponse = input('Please make your choice: ', 's');
end

   
